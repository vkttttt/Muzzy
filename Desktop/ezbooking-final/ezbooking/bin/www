#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('express-default:server');
 var http = require('http');
 const {Server} = require("socket.io");
 const {client} = require("../app/configs/connect_mongodb");

 /**
  * Get port from environment and store in Express.
  */

 var port = normalizePort(process.env.PORT || appConfig.port);
 //var port = process.env.PORT || appConfig.port;
 app.set('port', port);

 /**
  * Create HTTP server.
  */

 var server = http.createServer(app);

 /**
  * Listen on provided port, on all network interfaces.
  */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 console.log('Run on port ' + port);
 /**
  * Normalize a port into a number, string, or false.
  */

 function normalizePort(val) {
     var port = parseInt(val, 10);

     if (isNaN(port)) {
         // named pipe
         return val;
     }

     if (port >= 0) {
         // port number
         return port;
     }

     return false;
 }

 /**
  * Event listener for HTTP server "error" event.
  */

 function onError(error) {
     if (error.syscall !== 'listen') {
         throw error;
     }

     var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

     // handle specific listen errors with friendly messages
     switch (error.code) {
         case 'EACCES':
             console.error(bind + ' requires elevated privileges');
             process.exit(1);
             break;
         case 'EADDRINUSE':
             console.error(bind + ' is already in use');
             process.exit(1);
             break;
         default:
             throw error;
     }
 }

 /**
  * Event listener for HTTP server "listening" event.
  */

 function onListening() {
     var addr = server.address();
     var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
     debug('Listening on ' + bind);
 }

 const io = new Server(server);
 const EventEmitter = require('events').EventEmitter;
 const socketioEmitter = new EventEmitter();
socketioEmitter.setMaxListeners(100);

 let change_id;
 io.on('connection', (socket) => {
     socketioEmitter.on("db_message", (message) => {
         if (change_id == message.change_id) return
         change_id = message.change_id
         io.emit('message' + message.user_id + '&gt;', {'status': message.status, 'order_id': message._id})
         io.emit('message' + message.user_id, {'status': message.status, 'order_id': message._id})
         io.emit('message' + message.branch_id, {'status': message.status, 'order_id': message._id})
     })
 });

 //mongodb client
client.connect().then(async () => {
    const db = client.db('ezbooking_db')
    const orders = db.collection('ezbookingOrders')
    const ordersWatch = orders.watch()
    ordersWatch.on('change', async change => {
        const doc = await orders.findOne({_id: change.documentKey._id})
        doc.change_id = change._id._data
        socketioEmitter.emit('db_message', doc)
    })
})


 
 
 
 